package com.jobpost.service;

import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jobpost.dto.JobLocations;
import com.jobpost.dto.JobSkills;
import com.jobpost.exceptions.JobPostingException;
import com.jobpost.model.JobPost;
import com.jobpost.repository.JobLocationRepository;
import com.jobpost.repository.JobPostRepository;
import com.jobpost.repository.JobSkillsRepository;
import com.jobpost.utility.PreConditions;

@Service
public class JobPostServiceImplementation implements JobPostService {

	@Autowired
	private JobPostRepository repository;
	@Autowired
	private JobSkillsRepository skillsRepo;
	@Autowired
	private JobLocationRepository locationRepo;
	DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm");
	SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");

	LocalDateTime now = LocalDateTime.now();
	public static final Logger logger = LoggerFactory.getLogger(JobPostServiceImplementation.class);

	@Override
	public void postJob(JobPost postModel) throws JobPostingException {
		Optional<JobPost> job = repository.findByJobTitle(postModel.getJob_title());
		PreConditions.isPresentInDb(job.isPresent(), "job with this title already present");
		postModel.setUpdatedAt(dtf.format(now));
		repository.save(postModel);
		// TODO Auto-generated method stub

	}

	@Override
	public void postSkills(JobSkills jobSkills) throws JobPostingException {

		Optional<JobSkills> skills = skillsRepo.findBySkillName(jobSkills.getSkillName());
		PreConditions.isPresentInDb(skills.isPresent(), "This skill is already present!!");
		jobSkills.setSkillUpdatedAt(dtf.format(now));
		skillsRepo.save(jobSkills);

	}

	@Override
	public void postLocations(JobLocations jobLocations) throws JobPostingException {

		Optional<JobLocations> skills = locationRepo.findByLocationName(jobLocations.getLocationName());
		PreConditions.isPresentInDb(skills.isPresent(), "This skill is already present!!");
		jobLocations.setLocationUpdatedAt(dtf.format(now));
		locationRepo.save(jobLocations);
	}

	@Override
	public void addLocations(String location,  String jobId)  {

		Optional<JobPost> jobPost=repository.findById(jobId);
		PreConditions.isPresentInDb(jobPost.isPresent(),"job does not exist!!");

		/*Optional<JobLocations> locationdb = locationRepo.findById(jobId);
		PreConditions.isPresentInDb(locationdb.isPresent(),"location is already present");

		// Check if note has a list of labels or not, if not ,then create a new List
		if (locationdb.get().getLocationName() == null) {
			List<JobLocations> newLabelList = new ArrayList<>();
			locationdb.get().setLocationName(newLabelList);
		}

		// check if label is present in labelRepository
		Optional<Label> labelFound = labelRepository.findById(labelId);
		Label label = new Label();

		for (int i = 0; i < locationdb.get().getLabel().size(); i++) {
			if (labelId.equals(locationdb.get().getLabel().get(i).getLabelId())) {

				logger.error(messages.get("235"));
				throw new ToDoException(messages.get("120"));
			}
		}

		System.out.println("labelid" + labelFound.get().getLabelId());
		label.setLabelId(labelFound.get().getLabelId());
		label.setLabelName(labelFound.get().getLabelName());
		locationdb.get().getLabel().add(label);
		locationdb.get().setEditedAt(dtf.format(now));
		noteRepository.save(locationdb.get());
		noteElasticRepo.save(locationdb.get());

	}*/
}
